/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SalesService } from "../sales.service";
import { SalesCreateInput } from "./SalesCreateInput";
import { Sales } from "./Sales";
import { SalesFindManyArgs } from "./SalesFindManyArgs";
import { SalesWhereUniqueInput } from "./SalesWhereUniqueInput";
import { SalesUpdateInput } from "./SalesUpdateInput";

export class SalesControllerBase {
  constructor(protected readonly service: SalesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Sales })
  async createSales(@common.Body() data: SalesCreateInput): Promise<Sales> {
    return await this.service.createSales({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Sales] })
  @ApiNestedQuery(SalesFindManyArgs)
  async salesItems(@common.Req() request: Request): Promise<Sales[]> {
    const args = plainToClass(SalesFindManyArgs, request.query);
    return this.service.salesItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Sales })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async sales(
    @common.Param() params: SalesWhereUniqueInput
  ): Promise<Sales | null> {
    const result = await this.service.sales({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Sales })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSales(
    @common.Param() params: SalesWhereUniqueInput,
    @common.Body() data: SalesUpdateInput
  ): Promise<Sales | null> {
    try {
      return await this.service.updateSales({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Sales })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSales(
    @common.Param() params: SalesWhereUniqueInput
  ): Promise<Sales | null> {
    try {
      return await this.service.deleteSales({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
